{"ts":1358817923078,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express');\nvar http = require('http');\nvar nodemailer = require('nodemailer');\nvar MemoryStore = require('connect').session.MemoryStore;\nvar app = express();\nvar dbPath = 'mongodb://t2k:t2kmongo1@linus.mongohq.com:10062/t2k';\nvar fs = require('fs');\nvar events = require('events');\n\n// Create an http server\napp.server = http.createServer(app);\n\n// Create an event dispatcher\nvar eventDispatcher = new events.EventEmitter();\napp.addEventListener = function(eventName, callback) {\n    eventDispatcher.on(eventName, callback);\n};\napp.removeEventListener = function(eventName, callback) {\n    eventDispatcher.removeListener(eventName, callback);\n};\napp.triggerEvent = function(eventName, eventOptions) {\n    eventDispatcher.emit(eventName, eventOptions);\n};\n\n// Create a session store to share between methods\napp.sessionStore = new MemoryStore();\n\n// Import the data layer\nvar mongoose = require('mongoose');\nvar config = {\n    mail: require('./config/mail')\n};\n\n// Import the models\nvar models = {\n    Account: require('./models/Account')(app, config, mongoose, nodemailer)\n};\n\napp.configure(function() {\n    app.sessionSecret = 'SocialNet secret key';\n    app.set('view engine', 'jade');\n    app.use(express.static(__dirname + '/public'));\n    app.use(express.limit('1mb'));\n    app.use(express.bodyParser());\n    app.use(express.cookieParser());\n    app.use(express.session({\n        secret: app.sessionSecret,\n        key: 'express.sid',\n        store: app.sessionStore\n    }));\n    mongoose.connect(dbPath, function onMongooseError(err) {\n        if (err) throw err;\n    });\n});\n\n// Import the routes ... clever\nfs.readdirSync('routes').forEach(function(file) {\n    if (file[0] === '.') return;\n    var routeName = file.substr(0, file.indexOf('.'));\n    //console.log('adding routes:  ' + routeName);\n    require('./routes/' + routeName)(app, models);\n});\n\n\napp.get('/', function(req, res) {\n    res.render('index.jade');\n});\n\n\napp.post('/contacts/find', function(req, res) {\n    var searchStr = req.param('searchStr', null);\n    if (null === searchStr) {\n        res.send(400);\n        return;\n    }\n\n    models.Account.findByString(searchStr, function onSearchDone(err, accounts) {\n        if (err || accounts.length === 0) {\n            res.send(404);\n        }\n        else {\n            res.send(accounts);\n        }\n    });\n});\n\n// New in Chapter 9 - the server listens, instead of the app\napp.server.listen(process.env.PORT);\nconsole.log('Listening on process.env.PORT: ' + process.env.PORT);\ns"]],"start1":0,"start2":0,"length1":0,"length2":2527}]],"length":2527}
{"contributors":[],"silentsave":false,"ts":1358817928274,"patch":[[{"diffs":[[0,".PORT);\n"],[-1,"s"]],"start1":2518,"start2":2518,"length1":9,"length2":8}]],"length":2526,"saved":false}
