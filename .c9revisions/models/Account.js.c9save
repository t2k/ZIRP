{"ts":1358819274774,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = function(app, config, mongoose, nodemailer) {\n    var crypto = require('crypto');\n\n    var Status = new mongoose.Schema({\n        name: {\n            first: {\n                type: String\n            },\n            last: {\n                type: String\n            }\n        },\n        status: {\n            type: String\n        }\n    });\n\n    var schemaOptions = {\n        toJSON: {\n            virtuals: true\n        },\n        toObject: {\n            virtuals: true\n        }\n    };\n\n    var Contact = new mongoose.Schema({\n        name: {\n            first: {\n                type: String\n            },\n            last: {\n                type: String\n            }\n        },\n        accountId: {\n            type: mongoose.Schema.ObjectId\n        },\n        added: {\n            type: Date\n        }, // When the contact was added\n        updated: {\n            type: Date\n        } // When the contact last updated\n    }, schemaOptions);\n\n    Contact.virtual('online').get(function() {\n        return app.isAccountOnline(this.get('accountId'));\n    });\n\n    var AccountSchema = new mongoose.Schema({\n        email: {\n            type: String,\n            unique: true\n        },\n        password: {\n            type: String\n        },\n        name: {\n            first: {\n                type: String\n            },\n            last: {\n                type: String\n            },\n            full: {\n                type: String\n            }\n        },\n        birthday: {\n            day: {\n                type: Number,\n                min: 1,\n                max: 31,\n                required: false\n            },\n            month: {\n                type: Number,\n                min: 1,\n                max: 12,\n                required: false\n            },\n            year: {\n                type: Number\n            }\n        },\n        photoUrl: {\n            type: String\n        },\n        biography: {\n            type: String\n        },\n        contacts: [Contact],\n        status: [Status], // My own status updates only\n        activity: [Status] //  All status updates including friends\n    });\n\n    var Account = mongoose.model('Account', AccountSchema);\n\n    var registerCallback = function(err) {\n        if (err) {\n            return console.log(err);\n        };\n        return console.log('Account was created');\n    };\n\n    var changePassword = function(accountId, newpassword) {\n        var shaSum = crypto.createHash('sha256');\n        shaSum.update(newpassword);\n        var hashedPassword = shaSum.digest('hex');\n        Account.update({\n            _id: accountId\n        }, {\n            $set: {\n                password: hashedPassword\n            }\n        }, {\n            upsert: false\n        },\n\n        function changePasswordCallback(err) {\n            console.log('Change password done for account ' + accountId);\n        });\n    };\n\n    var forgotPassword = function(email, resetPasswordUrl, callback) {\n        var user = Account.findOne({\n            email: email\n        }, function findAccount(err, doc) {\n            if (err) {\n                // Email address is not a valid user\n                callback(false);\n            }\n            else {\n                var smtpTransport = nodemailer.createTransport('SMTP', config.mail);\n                resetPasswordUrl += '?account=' + doc._id;\n                smtpTransport.sendMail({\n                    from: 'thisapp@example.com',\n                    to: doc.email,\n                    subject: 'SocialNet Password Request',\n                    text: 'Click here to reset your password: ' + resetPasswordUrl\n                }, function forgotPasswordResult(err) {\n                    if (err) {\n                        callback(false);\n                    }\n                    else {\n                        callback(true);\n                    }\n                });\n            }\n        });\n    };\n\n    var login = function(email, password, callback) {\n        var shaSum = crypto.createHash('sha256');\n        shaSum.update(password);\n        Account.findOne({\n            email: email,\n            password: shaSum.digest('hex')\n        }, function(err, doc) {\n            callback(doc);\n        });\n    };\n\n    var findByString = function(searchStr, callback) {\n        var searchRegex = new RegExp(searchStr, 'i');\n        Account.find({\n            $or: [{\n                'name.full': {\n                    $regex: searchRegex\n                }\n            }, {\n                email: {\n                    $regex: searchRegex\n                }\n            }]\n        }, callback);\n    };\n\n    var findById = function(accountId, callback) {\n        Account.findOne({\n            _id: accountId\n        }, function(err, doc) {\n            callback(doc);\n        });\n    };\n\n    var addContact = function(account, addcontact) {\n        console.log(' >>models.addContact:');\n        //console.dir(addcontact);\n\n        var contact = {\n            name: {\n                first: addcontact.name.first,\n                last: addcontact.name.last\n            },\n            accountId: addcontact._id,\n            added: new Date(),\n            updated: new Date()\n        };\n        //console.dir(contact);\n        account.contacts.push(contact);\n\n        account.save(function(err) {\n            if (err) {\n                console.log('Error saving account: ' + err);\n            }\n        });\n    };\n\n    var removeContact = function(account, contactId) {\n        if (null === account.contacts) return;\n\n        account.contacts.forEach(function(contact) {\n            if (contact.accountId == contactId) {\n                account.contacts.remove(contact);\n            }\n        });\n        account.save();\n    };\n\n    var hasContact = function(account, contactId) {\n        if (null === account.contacts) return false;\n\n        account.contacts.forEach(function(contact) {\n            if (contact.accountId == contactId) {\n                return true;\n            }\n        });\n        return false;\n    };\n\n    var register = function(email, password, firstName, lastName) {\n        var shaSum = crypto.createHash('sha256');\n        shaSum.update(password);\n\n        console.log('Registering ' + email);\n        var user = new Account({\n            email: email,\n            name: {\n                first: firstName,\n                last: lastName,\n                full: firstName + ' ' + lastName\n            },\n            password: shaSum.digest('hex')\n        });\n        user.save(registerCallback);\n        console.log('Save command was sent');\n    };\n\n    return {\n        findById: findById,\n        register: register,\n        hasContact: hasContact,\n        forgotPassword: forgotPassword,\n        changePassword: changePassword,\n        findByString: findByString,\n        addContact: addContact,\n        removeContact: removeContact,\n        login: login,\n        Account: Account\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6927}]],"length":6927}
{"contributors":[],"silentsave":false,"ts":1358898753957,"patch":[[{"diffs":[[0,"\n       "],[-1," var user ="],[0," Account"]],"start1":2968,"start2":2968,"length1":27,"length2":16}]],"length":6916,"saved":false}
