{"ts":1359076468480,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿// app.js  define the marionette application object, app-regions, modulate events (vent) and start backbone.history\r\ndefine(['backbone', 'marionette', 'vent', 'bootstrapModal'], function (Backbone, Marionette, vent) {\r\n\r\n    // set up the app instance\r\n    var App = new Marionette.Application();\r\n    // configuration, setting up regions, etc ...\r\n\r\n    // see http://lostechies.com/derickbailey/2012/04/17/managing-a-modal-dialog-with-backbone-and-marionette/\r\n    var ModalRegion = Marionette.Region.extend({\r\n        el: \"#modal\",\r\n\r\n        constructor: function () {\r\n            Marionette.Region.prototype.constructor.apply(this, arguments);\r\n            console.log('modalRegion: constructor');\r\n            this.on(\"show\", this.showModal, this);\r\n        },\r\n\r\n        showModal: function (view) {\r\n            console.log('showModal called...');\r\n            view.on(\"close\", this.hideModal, this);\r\n            this.$el.modal('show');\r\n        },\r\n\r\n        hideModal: function () {\r\n            this.$el.modal('hide');\r\n        }\r\n    });\r\n\r\n\r\n    App.addRegions({\r\n        content: \"#content\",\r\n        modal: ModalRegion\r\n    });\r\n\r\n    // refactor, can this be better handled by a route?\r\n    // global event triggers passing in uid of selected user\r\n    vent.on('app:dialog', function (view) {\r\n        //var View = require('views/views.profile-dialog');\r\n        //var user = new profileModel({ uid: data });\r\n        //$.when(user.fetch()).then(function () {\r\n        //view = new dlgView({ model: model });\r\n        console.log('app:dialog handler was called');\r\n        App.modal.show(view); // $('#appModal').html(view.render().el).modal();\r\n        //});\r\n    });\r\n\r\n    // show an itemview: in the content region\r\n    vent.on('app:show', function (appView) {\r\n        App.content.show(appView);\r\n    });\r\n    // show an itemview: in the content region\r\n    vent.on('layout:rendered', function () {\r\n        //if (console) { console.log('layout:render==>app'); }\r\n        // App.content.show(appView);\r\n    });\r\n\r\n\r\n    // marionette app events...\r\n    App.on(\"initialize:after\", function () {\r\n        //if (console) { console.log('initialize:after'); }\r\n        Backbone.history.start();\r\n    });\r\n\r\n    // pass in router/controller via options\r\n    App.addInitializer(function (options) {\r\n        // configure for loading templates stored externally...\r\n        Marionette.TemplateCache.prototype.loadTemplate = function (templateId) {\r\n            // Marionette expects \"templateId\" to be the ID of a DOM element.\r\n            // But with RequireJS, templateId is actually the full text of the template.\r\n            var template = templateId;\r\n\r\n            // Make sure we have a template before trying to compile it\r\n            if (!template || template.length === 0) {\r\n                var msg = \"Could not find template: '\" + templateId + \"'\";\r\n                var err = new Error(msg);\r\n                err.name = \"NoTemplateError\";\r\n                throw err;\r\n            }\r\n            return template;\r\n        };\r\n\r\n        // pass in username to the controller...\r\n        //var controller = new options.controller({userName: options.userName});\r\n        //alert(options.userName);\r\n        //var x = _.extend(options.controller.prototype, {userName: options.userName });\r\n        // init library router/controller\r\n        new options.router.Router({\r\n            controller: options.controller // controller implements search and defaultsearch\r\n        });\r\n\r\n    });\r\n\r\n    // export the app from this module\r\n    return App;\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":3575}]],"length":3575}
